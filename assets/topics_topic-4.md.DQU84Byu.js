import{_ as i,c as a,o as t,ae as n}from"./chunks/framework.BQP09r6C.js";const h="/alt-container-guide/images/podman_upr4.png",p="/alt-container-guide/images/scheme_volume_mount.png",c=JSON.parse('{"title":"Упражнение 4: Работа с томами и монтируемыми каталогами","description":"","frontmatter":{},"headers":[],"relativePath":"topics/topic-4.md","filePath":"topics/topic-4.md"}'),l={name:"topics/topic-4.md"};function e(k,s,d,r,F,g){return t(),a("div",null,s[0]||(s[0]=[n('<h1 id="упражнение-4-работа-с-томами-и-монтируемыми-каталогами" tabindex="-1">Упражнение 4: Работа с томами и монтируемыми каталогами <a class="header-anchor" href="#упражнение-4-работа-с-томами-и-монтируемыми-каталогами" aria-label="Permalink to &quot;Упражнение 4: Работа с томами и монтируемыми каталогами&quot;">​</a></h1><p><img src="'+h+`" alt="Иллюстрация: Мария Фоканова"><em>Иллюстрация: Мария Фоканова</em></p><h2 id="вступление-с-теориеи" tabindex="-1">Вступление с теорией <a class="header-anchor" href="#вступление-с-теориеи" aria-label="Permalink to &quot;Вступление с теорией&quot;">​</a></h2><p>Контейнеры изолированы от системы, поэтому данные, созданные внутри, по умолчанию остаются внутри контейнера. Если удалить контейнер, все изменения в его файловой системе пропадут.</p><p><strong>Том (volume)</strong> – это специальное хранилище данных, связанное с контейнером, которое сохраняется независимо от жизненного цикла контейнера. С помощью томов или монтирования каталогов хоста можно сохранять данные между запусками контейнеров или обмениваться файлами между контейнером и хостом.</p><p>В Podman доступны:</p><ul><li><strong>Именованные томы</strong> – управляются Podman, хранятся в спец. каталоге на хосте. Можно создавать командой <code>podman volume create</code>.</li><li><strong>Монтируемые каталоги (bind mount)</strong> – привязка существующей папки хоста в файловую систему контейнера. Задаётся флагом <code>-v host_dir:container_dir</code> при запуске.</li></ul><p>Использование томов необходимо для приложений, которые должны сохранять своё состояние (БД, файлы настроек и пр.) или для передачи файлов на хост.</p><h2 id="практические-шаги" tabindex="-1">Практические шаги: <a class="header-anchor" href="#практические-шаги" aria-label="Permalink to &quot;Практические шаги:&quot;">​</a></h2><h2 id="_1-пример-без-тома" tabindex="-1">1. Пример без тома. <a class="header-anchor" href="#_1-пример-без-тома" aria-label="Permalink to &quot;1. Пример без тома.&quot;">​</a></h2><p>Для начала продемонстрируем проблему. Выполним контейнер, который создаёт файл внутри себя, и посмотрим, что произойдет с файлом после выхода.</p><p><strong>Запустим контейнер:</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.altlinux.org/alt/python:sisyphus</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span></span></code></pre></div><p>Мы запускаем контейнер на базе Python образа и вручную открываем bash внутри него (переопределяя команду).</p><p>Внутри контейнера выполним:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;container log&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/log.txt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp</span></span></code></pre></div><p>Видим, что файл <code>log.txt</code> появился в <code>/tmp</code> контейнера.</p><p>Теперь выйдем из контейнера (<code>exit</code>). Контейнер удалится (<code>--rm</code>). Если заново запустим новый контейнер, того файла там уже не будет — он не сохраняется вне жизни контейнера.</p><h2 id="_2-использование-bind-mount-привязка-каталога-хоста" tabindex="-1">2. Использование bind mount (привязка каталога хоста). <a class="header-anchor" href="#_2-использование-bind-mount-привязка-каталога-хоста" aria-label="Permalink to &quot;2. Использование bind mount (привязка каталога хоста).&quot;">​</a></h2><p>Смоделируем сценарий: контейнер будет записывать данные в каталог, который привязан к хосту, чтобы данные сохранялись локально. Создадим на хосте каталог для обмена, например:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mkdir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/Projects/podman-share</span></span></code></pre></div><p>Теперь запустим контейнер, смонтировав этот каталог:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/Projects/podman-share:/data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.altlinux.org/alt/python:sisyphus</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;f = open(&#39;/data/number.txt&#39;, &#39;w&#39;); f.write(&#39;42&#39;); f.close()&quot;</span></span></code></pre></div><p>Здесь флаг <code>-v ~/podman-share:/data</code> монтирует локальный каталог podman-share в контейнер как <code>/data</code>. Python-код внутри контейнера создает файл <code>/data/number.txt</code> и записывает в него число 42.</p><p>После завершения контейнера на хосте в каталоге <code>/podman-share</code> должен появиться файл <code>number.txt</code>.</p><p>Проверим это командой</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /podman-share/number.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # – содержимое должно быть 42.</span></span></code></pre></div><p>Несмотря на удаление контейнера, файл остался на хосте.</p><h2 id="_3-создание-именованного-тома" tabindex="-1">3. Создание именованного тома. <a class="header-anchor" href="#_3-создание-именованного-тома" aria-label="Permalink to &quot;3. Создание именованного тома.&quot;">​</a></h2><p>Теперь проделаем схожее с томом, управляемым Podman.</p><p>Сначала создадим том:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> volume</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myvol</span></span></code></pre></div><p>Команда вернёт имя тома (здесь мы явно указали <strong>myvol</strong>).</p><p>Запустим контейнер с примонтированным томом:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myvol:/data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.altlinux.org/alt/python:sisyphus</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bash</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;echo Hello &gt; /data/hello.txt&quot;</span></span></code></pre></div><p>Этот подход аналогичен предыдущему шагу, только вместо каталога хоста мы указали имя тома (<strong>myvol</strong>). После выполнения контейнера в том <strong>myvol</strong> теперь есть файл.</p><p>Как получить к нему доступ? Можно запустить временный контейнер для проверки, снова примонтировав этот том:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myvol:/data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.altlinux.org/alt/alt:p10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /data/hello.txt</span></span></code></pre></div><p>Здесь мы воспользовались образом <strong>alt:p10</strong> [можно взять минимальный образ, просто этот под руку попался. С минимальным быстрее будет], чтобы прочитать содержимое. Команда должна вывести <strong>Hello</strong>.</p><p>Таким образом, том myvol сохранил данные вне конкретного контейнера. Именованные томы обычно хранятся в <code>/var/lib/containers/storage/volumes/</code> или аналогичном пути на хосте, но управлять ими удобнее через Podman CLI.</p><h2 id="_4-права-доступа-и-selinux" tabindex="-1">4. Права доступа и SELinux. <a class="header-anchor" href="#_4-права-доступа-и-selinux" aria-label="Permalink to &quot;4. Права доступа и SELinux.&quot;">​</a></h2><p>Если SELinux включен, может потребоваться добавлять к монтированию суффикс <strong>:Z</strong> или <strong>:z</strong> для коррекции контекста. В наших примерах SELinux отключен, и эта информация скорее впрок: флаг <code>-v ~/share:/data:Z</code> пометит каталог соответствующим контекстом, чтобы контейнер имел доступ.</p><h2 id="_5-попрактикуемся-с-томами-задание-для-самостоятельнои-работы" tabindex="-1">5. Попрактикуемся с томами [Задание для самостоятельной работы]: <a class="header-anchor" href="#_5-попрактикуемся-с-томами-задание-для-самостоятельнои-работы" aria-label="Permalink to &quot;5. Попрактикуемся с томами [Задание для самостоятельной работы]:&quot;">​</a></h2><p><img src="`+p+`" alt="Иллюстрация: Мария Фоканова"></p><p>Запустим контейнер PostgreSQL (например, <code>registry.altlinux.org/alt/postgresql:sisyphus</code>) с именованным томом для хранения БД:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pg_test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POSTGRES_PASSWORD=pass</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PGDATA=/var/lib/pgsql/data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pgdata:/var/lib/pgsql/data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --entrypoint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/usr/bin/postgres&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  registry.altlinux.org/alt/postgresql:sisyphus</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/lib/pgsql/data</span></span></code></pre></div><p>рабоча команда</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pg_test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POSTGRES_PASSWORD=pass</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PGDATA=/var/lib/pgsql/data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pgdata:/var/lib/pgsql/data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  registry.altlinux.org/sisyphus/postgresql:16.6</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  bash</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;initdb -D /var/lib/pgsql/data &amp;&amp; postgres -D /var/lib/pgsql/data&quot;</span></span></code></pre></div><p>Это запустит СУБД Postgres, сохраняя данные в том pgdata. Проверим работу: <code>podman ps</code> Контейнер должен быть в статусе <code>Up</code>.</p><h3 id="поработаем-с-базои-данных" tabindex="-1">Поработаем с Базой Данных. <a class="header-anchor" href="#поработаем-с-базои-данных" aria-label="Permalink to &quot;Поработаем с Базой Данных.&quot;">​</a></h3><p>Попробуем подключиться:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pg_test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> psql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> postgres</span></span></code></pre></div><p>Должны получить вывод:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">psql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (16.6)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;help&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> help.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">postgres</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#</span></span></code></pre></div><h3 id="создадим-базу-данных-и-таблицу" tabindex="-1">Создадим базу данных и таблицу. <a class="header-anchor" href="#создадим-базу-данных-и-таблицу" aria-label="Permalink to &quot;Создадим базу данных и таблицу.&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DATABASE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testdb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\c testdb;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> users</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SERIAL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TEXT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Иван&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Анна&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users;</span></span></code></pre></div><p>Удалим контейнер командой</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pg_test</span></span></code></pre></div><p>Затем запустим новый контейнер с тем же монтированием:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pg_test2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POSTGRES_PASSWORD=pass</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pgdata:/var/lib/postgresql/data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> postgres:15</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pg_test2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> POSTGRES_PASSWORD=pass</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PGDATA=/var/lib/pgsql/data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pgdata:/var/lib/pgsql/data</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  --entrypoint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/usr/bin/postgres&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  registry.altlinux.org/alt/postgresql:sisyphus</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /var/lib/pgsql/data</span></span></code></pre></div><p>Подключимся к БД в контейнере:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pg_test2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> psql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -U</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> postgres</span></span></code></pre></div><p>Убедимся, что ранее созданная база и таблица с данными существуют, т.е. данные предыдущей БД сохранились:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">postgres</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testdb;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">You</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> are</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> now</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> connected</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;testdb&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> as</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;postgres&quot;.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">testdb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># SELECT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FROM users;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">----+----------</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Иван</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Анна</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="_6-попробуем-смонтировать-в-контеинер-какои-либо-системныи-каталог-в-режиме-только-чтение" tabindex="-1">6. Попробуем смонтировать в контейнер какой-либо системный каталог в режиме только-чтение. <a class="header-anchor" href="#_6-попробуем-смонтировать-в-контеинер-какои-либо-системныи-каталог-в-режиме-только-чтение" aria-label="Permalink to &quot;6. Попробуем смонтировать в контейнер какой-либо системный каталог в режиме только-чтение.&quot;">​</a></h2><p>Например:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc:/mnt:ro</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.altlinux.org/alt/alt:sisyphus</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /mnt</span></span></code></pre></div><p>Мы наблюдаем, что контейнер может увидеть файлы хоста в <code>/etc</code>, но не может их изменить (флаг <code>ro</code> делает монтирование <code>read-only</code>). Такой приём полезен для передачи внутрь контейнера конфигураций или данных, которые не должны модифицироваться контейнером.</p><h2 id="ожидаемыи-итог" tabindex="-1">Ожидаемый итог: <a class="header-anchor" href="#ожидаемыи-итог" aria-label="Permalink to &quot;Ожидаемый итог:&quot;">​</a></h2><p>мы научились пользоваться внешним хранением данных для контейнеров. Результатом шагов было сохранение файлов на хосте.</p><p>При монтировании каталога хоста, файл, созданный контейнером, появился на хостовой файловой системе.</p><p>При использовании именованного тома данные сохранились в томе и были доступны при повторном подключении тома к другому контейнеру. В самостоятельном задании контейнер Postgres при повторном запуске с тем же томом должен обнаружить существующие данные (базу) и продолжить работу с ними. А пример с read-only монтированием /etc должен перечислить файлы хоста без ошибок доступа, но попытка изменения файла внутри контейнера вызвала бы ошибку.</p><p>В этом материале мы научились сохранять и делать доступными данные контейнеров.</p>`,74)]))}const y=i(l,[["render",e]]);export{c as __pageData,y as default};
