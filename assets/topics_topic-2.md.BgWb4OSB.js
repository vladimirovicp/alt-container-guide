import{_ as a,c as i,o as s,ae as e}from"./chunks/framework.BQP09r6C.js";const o="/alt-container-guide/images/podman_upr2.png",k=JSON.parse('{"title":"Упражнение 2: Запуск первого контейнера с готовым образом Python","description":"","frontmatter":{},"headers":[],"relativePath":"topics/topic-2.md","filePath":"topics/topic-2.md"}'),n={name:"topics/topic-2.md"};function l(h,t,p,r,d,c){return s(),i("div",null,t[0]||(t[0]=[e('<h1 id="упражнение-2-запуск-первого-контеинера-с-готовым-образом-python" tabindex="-1">Упражнение 2: Запуск первого контейнера с готовым образом Python <a class="header-anchor" href="#упражнение-2-запуск-первого-контеинера-с-готовым-образом-python" aria-label="Permalink to &quot;Упражнение 2: Запуск первого контейнера с готовым образом Python&quot;">​</a></h1><p><img src="'+o+`" alt="Иллюстрация: Мария Фоканова"><em>Иллюстрация: Мария Фоканова</em></p><p>Контейнер создаётся на основе образа. Образ (image) – это шаблон со всем необходимым для запуска приложения: файловой системой, зависимостями, настройками. В <code>registry.altlinux.org</code> (и других публичных регистрах) доступны готовые образы, например образ Python с предустановленным интерпретатором.</p><blockquote><p><a href="https://registry.altlinux.org/image/alt%2Fpython/tag/sisyphus" target="_blank" rel="noreferrer">https://registry.altlinux.org/image/alt%2Fpython/tag/sisyphus</a></p></blockquote><p>Команда <code>podman run</code> запускает контейнер из указанного образа. Если образ не найден локально, Podman скачает его. В этом упражнении мы возьмём готовый образ Python и выполним простой Python-код внутри контейнера. В результате увидим, как контейнер изолирует выполнение кода, используя среду образа.</p><hr><h2 id="выбор-образа-python" tabindex="-1">Выбор образа Python <a class="header-anchor" href="#выбор-образа-python" aria-label="Permalink to &quot;Выбор образа Python&quot;">​</a></h2><p>Образы с Python имеют имя python в Alt Registry. В некоторых случаях можно работать с тегом с версией Python (<code>https://registry.altlinux.org/image/sisyphus%2Fpython</code>), например 3.12.8. Если тег не указан, по умолчанию используется latest (обычно последняя стабильная версия Python).</p><h2 id="запуск-контеинера-с-командои-python" tabindex="-1">Запуск контейнера с командой Python <a class="header-anchor" href="#запуск-контеинера-с-командои-python" aria-label="Permalink to &quot;Запуск контейнера с командой Python&quot;">​</a></h2><p>Выполним в контейнере простой скрипт без создания файлов:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.altlinux.org/sisyphus/python:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;print(&#39;Hello from container&#39;)&quot;</span></span></code></pre></div><p>Разберём команду.</p><ul><li><code>podman run</code> – запуск нового контейнера;</li><li><code>--rm</code> означает удалить контейнер после завершения;</li><li><code>registry.altlinux.org/sisyphus/python:latest</code> – образ из публичного хранилища;</li><li>далее идёт команда, которая выполняется внутри контейнера: python3 -c &quot;&lt;код&gt;&quot;.</li></ul><p>Здесь Python интерпретатор в контейнере выполнит однострочный скрипт, который печатает строку.</p><p>При первом запуске Podman загрузит образ <code>python:latest</code>, что может занять время (образ большой). После скачивания контейнер запустится, выведет <code>Hello from container</code> и завершится.</p><h2 id="интерактивная-работа-в-контеинере" tabindex="-1">Интерактивная работа в контейнере <a class="header-anchor" href="#интерактивная-работа-в-контеинере" aria-label="Permalink to &quot;Интерактивная работа в контейнере&quot;">​</a></h2><p>Запустим контейнер в интерактивном режиме, чтобы вручную поработать внутри него. Например:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python:latest</span></span></code></pre></div><p>Флаг <code>-it</code> запускает контейнер в интерактивном режиме терминала. Полная команда запустит интерпретатор Python внутри контейнера (в составе образа уже установлен интерпретатор python). Мы видим приглашение &gt;&gt;&gt; . Попробуем ввести <code>import platform; print(platform.system())</code>. Должно отобразиться название платформы внутри контейнера - <code>Linux</code>. Для выхода нажмем <code>Ctrl+D</code>. Такой режим полезен для экспериментов или отладки в окружении контейнера.</p><h2 id="просмотр-запущенных-контеинеров" tabindex="-1">Просмотр запущенных контейнеров <a class="header-anchor" href="#просмотр-запущенных-контеинеров" aria-label="Permalink to &quot;Просмотр запущенных контейнеров&quot;">​</a></h2><p>В новом терминале выполним <code>podman ps</code> – эта команда покажет список работающих контейнеров. Во время интерактивной сессии Python видим один контейнер с образом <code>python:latest</code> в статусе <code>Up</code>. После выхода из Python контейнер завершится, и podman ps не будет его отображать (вместо этого <code>podman ps -a</code> показал бы остановленные контейнеры).</p><h2 id="задание-для-самостоятельнои-работы" tabindex="-1">Задание для самостоятельной работы <a class="header-anchor" href="#задание-для-самостоятельнои-работы" aria-label="Permalink to &quot;Задание для самостоятельной работы&quot;">​</a></h2><p>Попрактикуемся с разными образами и командами:</p><ol><li>Запустите контейнер с другим тегом Python, например <code>python:3.12.8</code> или <code>3.9.20</code>, и выполните в нём аналогичный вывод текста.</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registry.altlinux.org/sisyphus/python:3.12.8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registry.altlinux.org/p10/python:3.9.20</span></span></code></pre></div><ol start="2"><li>Найдите в Alt Registry образ python для ветки P10 (или P11). Запустите</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">podman</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry.altlinux.org/p10/python:latest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;import sys; print(sys.version)&quot;</span></span></code></pre></div><p>Убедитесь, что Python исполнился и вывел версию интерпретатора.</p><ol start="3"><li>Дополнительно: используем образ <code>docker.io/library/hello-world</code> для запуска контейнера: <code>podman run --rm hello-world</code>. Ознакомимся с сообщением, которое выводит этот контейнер, и обратим внимание, что оно объясняет работу контейнеров. Текст встроен в образ.</li></ol><h2 id="ожидаемыи-итог" tabindex="-1">Ожидаемый итог: <a class="header-anchor" href="#ожидаемыи-итог" aria-label="Permalink to &quot;Ожидаемый итог:&quot;">​</a></h2><ul><li>мы научились запускать готовые образы;</li><li>контейнер с интерпретатором python выполнил Python-код и напечатал сообщение «Hello from container»;</li><li>при интерактивном запуске мы вошли в консоль Python внутри контейнера и убедились, что работаем в изолированной среде Linux;</li><li>контейнеры с разными образами Python корректно запускаются и выполняют указанный код, показывая версию Python или другие результаты.</li></ul>`,31)]))}const g=a(n,[["render",l]]);export{k as __pageData,g as default};
